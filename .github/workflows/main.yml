name: Main

on:
  push:
    paths-ignore:
      - "README.md"
      - "CHANGELOG.md"
      - "LICENSE"
      - ".gitignore"
      - ".vscode"
  workflow_dispatch:

env:
  CYPRESS_WAIT_ON: http://localhost:8000
  CYPRESS_WAIT_ON_TIMEOUT: 600
  CYPRESS_SPEC: cypress/e2e/**/*.cy.ts
  SERVICE: portal
  PYTHON_VERSION: 3.8

jobs:
  # The below code was adapted from this documentation.
  # https://docs.cypress.io/guides/continuous-integration/github-actions#Parallelization
  # https://github.com/cypress-io/cypress-docker-images/tree/master/browsers
  test-chrome:
    runs-on: ubuntu-latest
    steps:
      - name: 🛫 Checkout
        uses: actions/checkout@v3

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: "x64"

      - name: 🧪 Test on Chrome
        uses: cypress-io/github-action@v5.6.1
        with:
          working-directory: frontend
          #TODO: Currently using the run script for local development
          start: bash ../run
          wait-on: ${{ env.CYPRESS_WAIT_ON }}
          wait-on-timeout: ${{ env.CYPRESS_WAIT_ON_TIMEOUT }}
          browser: chrome
          record: true
          spec: ${{ env.CYPRESS_SPEC }}
          cache-key: os-${{ runner.os }}-dependencies-${{ hashFiles('yarn.lock') }}
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_ENV: production

      - name: 🔍 Report test info
        working-directory: frontend
        run: npx cypress info

      - name: 🔍 Report CPU info
        working-directory: frontend
        run: node -p 'os.cpus()'

      - name: ✅ Upload coverage to Codecov
        uses: codecov/codecov-action@v3.1.0

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test-chrome]
    if: github.ref == 'refs/heads/production' || github.ref == 'refs/heads/development' || github.ref == 'refs/heads/staging'
    steps:
      - name: 🛫 Checkout
        uses: actions/checkout@v3

      - name: 🌳 Set Branch Env Var
        run: echo "BRANCH=$(git branch --show-current)" >> $GITHUB_ENV

      - name: 🌐 Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🗝 Authenticate with GCloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: 🤖 Set up GCloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: 🛠 Install Frontend Dependencies
        working-directory: ./frontend
        run: yarn install
        # TODO: fix dependencies and uncomment below lines
        # env:
        #   NODE_ENV: production

      - name: 🛠 Build Frontend
        working-directory: ./frontend
        run: yarn run build
        env:
          NODE_ENV: production

      - name: 🛠 Bundle Frontend
        working-directory: ./frontend
        run: node djangoBundler.js
        env:
          NODE_ENV: production

      - name: 🛠 Install Backend Dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          python -m pip install pipenv
          pipenv install

      - name: 🔎 Check Migrations
        working-directory: ./backend
        run: pipenv run python ./manage.py makemigrations --check --dry-run

      - name: 🛠 Generate requirements.txt
        working-directory: ./backend
        run: pipenv requirements > requirements.txt

      - name: 🛠 Collect Static Files
        working-directory: ./backend
        run: pipenv run python ./manage.py collectstatic --noinput --clear

      - name: 🖊️ Configure App Deployment
        uses: mikefarah/yq@master
        with:
          cmd: yq -i '.service = "${{ env.BRANCH }}-${{ env.SERVICE }}"' backend/app.yaml

      - name: 🚀 Deploy App on GCloud
        working-directory: ./backend
        run: gcloud app deploy
